#compdef rancher
#
# zsh completion for rancher-cli (https://github.com/rancher/cli)
#
# version:  0.0.1
# github:   https://github.com/go/rancher-zsh-completion
#
# contributors:
#   - Go Chiba
#
# license:
#
# Copyright (c) 2016, Go Chiba
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

# Short-option stacking can be enabled with:
#  zstyle ':completion:*:*:rancher:*' option-stacking yes
#  zstyle ':completion:*:*:rancher-*:*' option-stacking yes
__rancher_arguments() {
    if zstyle -t ":completion:${curcontext}:" option-stacking; then
        print -- -s
    fi
}

# BO catalog

__rancher_catalog_commands() {
    local -a _rancher_catalog_subcommands
    _rancher_catalog_subcommands=(
        "ls:List catalog templates"
        "install: Install catalog template"
    )
    _describe -t rancher-catalog-commands "rancher catalog command" _rancher_catalog_subcommands
}

__rancher_catalog_subcommand() {
    local -a _command_args opts_help
    local expl help="--help"
    integer ret=1

    opts_help=("(: -)--help[Print usage]")

    case "$words[1]" in
        (ls)
             _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --quiet,-q)"{--quiet,-q}"[Only display IDs]" \
                "($help --format)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" \
                "($help --system,-s)"{--system,-s}"[Show system templates, not user]" && ret=0
            ;;
        (install)
             _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --answers,-a)"{--answers,-a}"[Answer file]" \
                "($help --name)"--name"[Name of stack to create]" \
                "($help --system,-s)"{--system,-s}"[Install a system template]" && ret=0
            ;;
        (help)
            _arguments $(__rancher_arguments) ":subcommand:__rancher_catalog_commands" && ret=0
            ;;
    esac

    return ret
}

# EO catalog

# BO environment

__rancher_environments() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines environments args

    type=$1; shift
    filter=$1; shift
    [[ $filter != "none" ]] && args=("-f $filter")

    ### TODO: Currently not supported Account base API
    if [[ -z "${(M)RANCHER_URL:#*project*}" ]] then
        return 0
    else
        lines=(${(f)"$(_call_program commands rancher environment ls)"})
    fi
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Env ID and Name
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:10:: :::)${${line[${begin[NAME]},${end[NAME]}]}%% ##}}"
        environments=($environments $s)
    done

    _describe -t environments-list "environments" environments "$@" && ret=0
    return ret
}

__rancher_environment_commands() {
    local -a _rancher_environment_subcommands
    _rancher_environment_subcommands=(
        "ls:List environments"
        "create:Create an environment"
        "rm:Remove environment(s)"
        "update:Update environment"
        "deactivate:Deactivate environment(s)"
        "activate:Activate environment(s)"
    )
    _describe -t rancher-environment-commands "rancher environment command" _rancher_environment_subcommands
}

__rancher_environment_subcommand() {
    local -a _command_args opts_help
    local expl help="--help"
    integer ret=1

    opts_help=("(: -)--help[Print usage]")

    case "$words[1]" in
        (ls)
             _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"{--all,-a}"[Show stop/inactive and recently removed resources]" \
                "($help)"{--quiet,-q}"[Only display IDs]" \
                "($help)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" && ret=0
            ;;
        (create)
             _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"{--orchestration,-o}"[Orchestration framework]" && ret=0
            ;;
        (rm)
            _arguments $(__rancher_arguments) \
                $opts_help && ret=0
            ;;
        (update)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"{--orchestration,-o}"[Orchestration framework]" && ret=0
            ;;
        (deactivate)
             _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -)*:environment:__rancher_environments" && ret=0
            ;;
        (activate)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -)*:environment:__rancher_environments" && ret=0
            ;;
        (help)
            _arguments $(__rancher_arguments) ":subcommand:__rancher_environment_commands" && ret=0
            ;;
    esac

    return ret
}

# EO environment

# BO host

__rancher_hosts() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines hosts args

    ### TODO: Currently not supported Account base API
    if [[ -z "${(M)RANCHER_URL:#*project*}" ]] then
        return 0
    else
        lines=(${(f)"$(_call_program commands rancher host ls)"})
    fi
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Host ID and Hostname
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:20:: :::)${${line[${begin[HOSTNAME]},${end[HOSTNAME]}]}%% ##}}"
        hosts=($hosts $s)
    done

    _describe -t hosts-list "hosts" hosts "$@" && ret=0
    return ret
}

__rancher_host_commands() {
    local -a _rancher_host_subcommands
    _rancher_host_subcommands=(
        "ls:List hosts"
        "create:Create a host"
        "help:Shows a list of commands or help for one command"
    )
    _describe -t rancher-host-commands "rancher host command" _rancher_host_subcommands
}

__rancher_host_subcommand() {
    local -a _command_args opts_help
    local expl help="--help"
    integer ret=1

    opts_help=("(: -)--help[Print usage]")

    case "$words[1]" in
        (ls)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"--quiet,-q"[Only display IDs]" \
                "($help)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" && ret=0
            ;;
        (create)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"--driver,-d"[Driver to use: amazonec2, azure, packet, digitalocean]" \
                "($help)"--description"[\[\$DESCRIPTION\]]" \
                "($help)"--labels"[\[\$LABELS\]]" \
                "($help)"--docker-version"[\[\$DOCKER_VERSION\]]" \
                "($help)"--auth-key"[\[\$AUTH_KEY\]]" \
                "($help)"--auth-certificate-authority"[\[\$AUTH_CERTIFICATE_AUTHORITY\]]" \
                "($help)"--engine-install-url"[\[\$ENGINE_INSTALL_URL\]]:url:(http\:// https\://)" \
                "($help)"--engine-registry-mirror"[\[\$ENGINE_REGISTRY_MIRROR\]]" \
                "($help)"--engine-insecure-registry"[\[\$ENGINE_INSECURE_REGISTRY\]]" \
                "($help)"--engine-storage-driver"[\[\$ENGINE_STORAGE_DRIVER\]]" \
                "($help)"--engine-opt"[\[\$ENGINE_OPT\]]" \
                "($help)"--engine-label"[\[\$ENGINE_LABEL\]]" \
                "($help)"--engine-env"[\[\$ENGINE_ENV\]]" \
                "($help)"--packet-os"[Pakcet OS, possible values are: ubuntu_14_04 \[\$PACKET_OS\]]" \
                "($help)"--packet-plan"[Pakcet Server Plan \[\$PACKET_PLAN\]]" \
                "($help)"--packet-project-id"[Pakcet Project Id \[\$PACKET_PROJECT_ID\]]" \
                "($help)"--packet-api-key"[Pakcet api key \[\$PACKET_API_KEY\]]" \
                "($help)"--packet-billing-cycle"[Packet billing cycle, hourly or monthly \[\$PACKET_BILLING_CYCLE\]]" \
                "($help)"--packet-facility-code"[Packet facility code \[\$PACKET_FACILITY_CODE\]]" \
                "($help)"--digitalocean-ipv6"[enable ipv6 for droplet \[\$DIGITALOCEAN_IPV6\]]" \
                "($help)"--digitalocean-access-token"[Digital Ocean access token \[\$DIGITALOCEAN_ACCESS_TOKEN\]]" \
                "($help)"--digitalocean-ssh-key-fingerprint"[SSH key fingerprint \[\$DIGITALOCEAN_SSH_KEY_FINGERPRINT\]]" \
                "($help)"--digitalocean-ssh-user"[SSH username \[\$DIGITALOCEAN_SSH_USER\]]" \
                "($help)"--digitalocean-userdata"[path to file with cloud-init user-data \[\$DIGITALOCEAN_USERDATA\]]" \
                "($help)"--digitalocean-region"[Digital Ocean region \[\$DIGITALOCEAN_REGION\]]" \
                "($help)"--digitalocean-size"[Digital Ocean size \[\$DIGITALOCEAN_SIZE\]]" \
                "($help)"--digitalocean-ssh-port"[SSH port \[\$DIGITALOCEAN_SSH_PORT\]]" \
                "($help)"--digitalocean-backups"[enable backups for droplet \[\$DIGITALOCEAN_BACKUPS\]]" \
                "($help)"--digitalocean-image"[Digital Ocean Image \[\$DIGITALOCEAN_IMAGE\]]" \
                "($help)"--digitalocean-private-networking"[enable private networking for droplet \[\$DIGITALOCEAN_PRIVATE_NETWORKING\]]" \
                "($help)"--amazonec2-insecure-transport"[Disable SSL when sending requests \[\$AMAZONEC2_INSECURE_TRANSPORT\]]" \
                "($help)"--amazonec2-root-size"[AWS root disk size (in GB) \[\$AMAZONEC2_ROOT_SIZE\]]" \
                "($help)"--amazonec2-secret-key"[AWS Secret Key \[\$AMAZONEC2_SECRET_KEY\]]" \
                "($help)"--amazonec2-session-token"[AWS Session Token \[\$AMAZONEC2_SESSION_TOKEN\]]" \
                "($help)"--amazonec2-ssh-keypath"[SSH Key for Instance \[\$AMAZONEC2_SSH_KEYPATH\]]" \
                "($help)"--amazonec2-tags"[AWS Tags (e.g. key1,value1,key2,value2) \[\$AMAZONEC2_TAGS\]]" \
                "($help)"--amazonec2-iam-instance-profile"[AWS IAM Instance Profile \[\$AMAZONEC2_IAM_INSTANCE_PROFILE\]]" \
                "($help)"--amazonec2-access-key"[AWS Access Key \[\$AMAZONEC2_ACCESS_KEY\]]" \
                "($help)"--amazonec2-keypair-name"[AWS keypair to use; requires --amazonec2-ssh-keypath \[\$AMAZONEC2_KEYPAIR_NAME\]]" \
                "($help)"--amazonec2-private-address-only"[Only use a private IP address \[\$AMAZONEC2_PRIVATE_ADDRESS_ONLY\]]" \
                "($help)"--amazonec2-request-spot-instance"[Set this flag to request spot instance \[\$AMAZONEC2_REQUEST_SPOT_INSTANCE\]]" \
                "($help)"--amazonec2-vpc-id"[AWS VPC id \[\$AMAZONEC2_VPC_ID\]]" \
                "($help)"--amazonec2-endpoint"[Optional endpoint URL (hostname only or fully qualified URI) \[\$AMAZONEC2_ENDPOINT\]]:url:(http\:// https\://" \
                "($help)"--amazonec2-region"[AWS region \[\$AMAZONEC2_REGION\]]" \
                "($help)"--amazonec2-spot-price"[AWS spot instance bid price (in dollar) \[\$AMAZONEC2_SPOT_PRICE\]]" \
                "($help)"--amazonec2-ami"[AWS machine image \[\$AMAZONEC2_AMI\]]" \
                "($help)"--amazonec2-open-port"[Make the specified port number accessible from the Internet \[\$AMAZONEC2_OPEN_PORT\]]" \
                "($help)"--amazonec2-ssh-user"[Set the name of the ssh user \[\$AMAZONEC2_SSH_USER\]]" \
                "($help)"--amazonec2-use-ebs-optimized-instance"[Create an EBS optimized instance \[\$AMAZONEC2_USE_EBS_OPTIMIZED_INSTANCE\]]" \
                "($help)"--amazonec2-use-private-address"[Force the usage of private IP address \[\$AMAZONEC2_USE_PRIVATE_ADDRESS\]]" \
                "($help)"--amazonec2-zone"[AWS zone for instance (i.e. a,b,c,d,e) \[\$AMAZONEC2_ZONE\]]" \
                "($help)"--amazonec2-instance-type"[AWS instance type \[\$AMAZONEC2_INSTANCE_TYPE\]]" \
                "($help)"--amazonec2-security-group"[AWS VPC security group \[\$AMAZONEC2_SECURITY_GROUP\]]" \
                "($help)"--amazonec2-retries"[Set retry count for recoverable failures (use -1 to disable) \[\$AMAZONEC2_RETRIES\]]" \
                "($help)"--amazonec2-monitoring"[Set this flag to enable CloudWatch monitoring \[\$AMAZONEC2_MONITORING\]]" \
                "($help)"--amazonec2-subnet-id"[AWS VPC subnet id \[\$AMAZONEC2_SUBNET_ID\]]" \
                "($help)"--amazonec2-volume-type"[Amazon EBS volume type \[\$AMAZONEC2_VOLUME_TYPE\]]" \
                "($help)"--amazonec2-device-name"[AWS root device name \[\$AMAZONEC2_DEVICE_NAME\]]" \
                "($help)"--azure-image"[Azure virtual machine OS image \[\$AZURE_IMAGE\]]" \
                "($help)"--azure-location"[Azure region to create the virtual machine \[\$AZURE_LOCATION\]]" \
                "($help)"--azure-private-ip-address"[Specify a static private IP address for the machine \[\$AZURE_PRIVATE_IP_ADDRESS\]]" \
                "($help)"--azure-resource-group"[Azure Resource Group name (will be created if missing) \[\$AZURE_RESOURCE_GROUP\]]" \
                "($help)"--azure-vnet"[Azure Virtual Network name to connect the virtual machine (in \[resourcegroup:\]name format) \[\$AZURE_VNET\]]" \
                "($help)"--azure-availability-set"[Azure Availability Set to place the virtual machine into \[\$AZURE_AVAILABILITY_SET\]]" \
                "($help)"--azure-client-secret"[Azure Service Principal Account password (optional, browser auth is used if not specified) \[\$AZURE_CLIENT_SECRET\]]" \
                "($help)"--azure-environment"[Azure environment (e.g. AzurePublicCloud, AzureChinaCloud) \[\$AZURE_ENVIRONMENT\]]" \
                "($help)"--azure-no-public-ip"[Do not create a public IP address for the machine \[\$AZURE_NO_PUBLIC_IP\]]" \
                "($help)"--azure-ssh-user"[Username for SSH login \[\$AZURE_SSH_USER\]]" \
                "($help)"--azure-subnet"[Azure Subnet Name to be used within the Virtual Network \[\$AZURE_SUBNET\]]" \
                "($help)"--azure-open-port"[Make the specified port number accessible from the Internet \[\$AZURE_OPEN_PORT\]]" \
                "($help)"--azure-size"[Size for Azure Virtual Machine \[\$AZURE_SIZE\]]" \
                "($help)"--azure-static-public-ip"[Assign a static public IP address to the machine \[\$AZURE_STATIC_PUBLIC_IP\]]" \
                "($help)"--azure-storage-type"[Type of Storage Account to host the OS Disk for the machine \[\$AZURE_STORAGE_TYPE\]]" \
                "($help)"--azure-subscription-id"[Azure Subscription ID \[\$AZURE_SUBSCRIPTION_ID\]]" \
                "($help)"--azure-client-id"[Azure Service Principal Account ID (optional, browser auth is used if not specified) \[\$AZURE_CLIENT_ID\]]" \
                "($help)"--azure-custom-data"[Path to file with custom-data \[\$AZURE_CUSTOM_DATA\]]" \
                "($help)"--azure-docker-port"[Port number for Docker engine \[\$AZURE_DOCKER_PORT\]]" \
                "($help)"--azure-subnet-prefix"[Private CIDR block to be used for the new subnet, should comply RFC 1918 \[\$AZURE_SUBNET_PREFIX\]]" \
                "($help)"--azure-use-private-ip"[Use private IP address of the machine to connect \[\$AZURE_USE_PRIVATE_IP\]]"  && ret=0
            ;;
        (help)
            _arguments $(__rancher_arguments) ":subcommand:__rancher_host_commands" && ret=0
            ;;
    esac

    return ret
}

# EO host

# BO stack

__rancher_stacks() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines stacks args

    ### TODO: Currently not supported Account base API
    if [[ -z "${(M)RANCHER_URL:#*project*}" ]] then
        return 0
    else
        lines=(${(f)"$(_call_program commands rancher stack ls)"})
    fi
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Host ID and Name
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:20:: :::)${${line[${begin[NAME]},${end[NAME]}]}%% ##}}"
        s="$s , ${(r:20:: :::)${${line[${begin[STATE]},${end[STATE]}]}%% ##}}"
        stacks=($stacks $s)
    done

    _describe -t stacks-list "stacks" stacks "$@" && ret=0
    return ret
}

__rancher_stack_commands() {
    local -a _rancher_stack_subcommands
    _rancher_stack_subcommands=(
        "ls:List stacks"
    )
    _describe -t rancher-stack-commands "rancher stack command" _rancher_stack_subcommands
}

__rancher_stack_subcommand() {
    local -a _command_args opts_help opts_create_update
    local expl help="--help"
    integer ret=1

    opts_help=("(: -)--help[Print usage]")
    opts_create_update=(
        "($help)*--constraint=[Placement constraints]:constraint: "
        "($help)--endpoint-mode=[Placement constraints]:mode:(dnsrr vip)"
        "($help)*"{-e=,--env=}"[Set environment variables]:env: "
        "($help)*--group-add=[Add additional user groups to the container]:group:_groups"
        "($help)*--label=[Service labels]:label: "
        "($help)--limit-cpu=[Limit CPUs]:value: "
        "($help)--limit-memory=[Limit Memory]:value: "
        "($help)--log-driver=[Logging driver for service]:logging driver:__rancher_log_drivers"
        "($help)*--log-opt=[Logging driver options]:log driver options:__rancher_log_options"
        "($help)*--mount=[Attach a mount to the service]:mount: "
        "($help)--name=[Service name]:name: "
        "($help)*--network=[Network attachments]:network: "
        "($help)*"{-p=,--publish=}"[Publish a port as a node port]:port: "
        "($help)--replicas=[Number of tasks]:replicas: "
        "($help)--reserve-cpu=[Reserve CPUs]:value: "
        "($help)--reserve-memory=[Reserve Memory]:value: "
        "($help)--restart-condition=[Restart when condition is met]:mode:(any none on-failure)"
        "($help)--restart-delay=[Delay between restart attempts]:delay: "
        "($help)--restart-max-attempts=[Maximum number of restarts before giving up]:max-attempts: "
        "($help)--restart-window=[Window used to evaluate the restart policy]:window: "
        "($help)--stop-grace-period=[Time to wait before force killing a container]:grace period: "
        "($help)--update-delay=[Delay between updates]:delay: "
        "($help)--update-failure-action=[Action on update failure]:mode:(pause continue)"
        "($help)--update-parallelism=[Maximum number of tasks updated simultaneously]:number: "
        "($help -u --user)"{-u=,--user=}"[Username or UID]:user:_users"
        "($help)--with-registry-auth[Send registry authentication details to swarm agents]"
        "($help -w --workdir)"{-w=,--workdir=}"[Working directory inside the container]:directory:_directories"
    )

    case "$words[1]" in
        (ls)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --quiet, -q)"{--quiet,-q}"[Only display IDs]" \
                "($help --format)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" && ret=0
            ;;
        (help)
            _arguments $(__rancher_arguments) ":subcommand:__rancher_stack_commands" && ret=0
            ;;
    esac

    return ret
}

# EO stack

# BO volume

__rancher_volumes() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines volumes args

    ### TODO: Currently not supported Account base API
    if [[ -z "${(M)RANCHER_URL:#*project*}" ]] then
        return 0
    else
        lines=(${(f)"$(_call_program commands rancher volumes ls)"})
    fi
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Host ID and Name
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:20:: :::)${${line[${begin[NAME]},${end[NAME]}]}%% ##}}"
        s="$s , ${(r:20:: :::)${${line[${begin[STATE]},${end[STATE]}]}%% ##}}"
        stacks=($stacks $s)
    done

    _describe -t stacks-list "stacks" stacks "$@" && ret=0
    return ret
}

__rancher_volume_commands() {
    local -a _rancher_volume_subcommands
    _rancher_volume_subcommands=(
        "ls:List volumes"
        "rm:Delete volume"
        "create:Create volume"
    )
    _describe -t rancher-volume-commands "rancher volume command" _rancher_volume_subcommands
}

__rancher_volume_subcommand() {
    local -a _command_args opts_help
    local expl help="--help"
    integer ret=1

    opts_help=("(: -)--help[Print usage]")

    case "$words[1]" in
        (ls)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --all, -a)"{--all,-a}"[Show stop/inactive and recently removed resources]" \
                "($help --quit, -q)"{--quit,-q}"[Only display IDs]" \
                "($help --format)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" && ret=0
            ;;
        (rm)
            _arguments $(__rancher_arguments) \
                $opts_help && ret=0
            ;;
        (create)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --driver)"--driver"[Specify volume driver name]" \
                "($help --opt)"--opt"[Set driver specific key/value options]" && ret=0
            ;;
        (help)
            _arguments $(__rancher_arguments) ":subcommand:__rancher_volume_commands" && ret=0
            ;;
    esac

    return ret
}
# EO volume

# BO service

__rancher_services() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines services args

    ### TODO: Design to filtering service type lines
    ### TODO: Currently not supported Account base API
    if [[ -z "${(M)RANCHER_URL:#*project*}" ]] then
        return 0
    else
        lines=(${(f)"$(_call_program commands rancher ps -a)"})
    fi
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Host ID and Name
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:30:: :::)${${line[${begin[NAME]},${end[NAME]}]}%% ##}}"
        s="$s, ${(r:30:: :::)${${line[${begin[STATE]},${end[STATE]}]}%% ##}}"
        services=($services $s)
    done

    _describe -t services-list "services" services "$@" && ret=0
    return ret
}

# EO service

# BO container

__rancher_containers() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines containers args

    ### TODO: Currently not supported Account base API
    if [[ -z "${(M)RANCHER_URL:#*project*}" ]] then
        return 0
    else
        lines=(${(f)"$(_call_program commands rancher ps -c -a)"})
    fi
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Host ID and Name
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:30:: :::)${${line[${begin[NAME]},${end[NAME]}]}%% ##}}"
        s="$s, ${${${line[${begin[STATE]},${end[STATE]}]}/:/\\:}%% ##}"
        s="$s , ${${${line[${begin[IMAGE]},${end[IMAGE]}]}/:/\\:}%% ##}"
        containers=($containers $s)
    done

    _describe -t containers-list "containers" containers "$@" && ret=0
    return ret
}

# EO container

# BO machine

__rancher_machines() {
    [[ $PREFIX = -* ]] && return 1
    integer ret=1
    local line s
    declare -a lines machines args

    ### TODO: Design to filtering machine type lines
    lines=(${(f)"$(_call_program commands rancher ps -c)"})
    # Parse header line to find columns
    local i=1 j=1 k header=${lines[1]}
    declare -A begin end
    while (( j < ${#header} - 1 )); do
        i=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 1 ))
        j=$(( i + ${${header[$i,-1]}[(i)  ]} - 1 ))
        k=$(( j + ${${header[$j,-1]}[(i)[^ ]]} - 2 ))
        begin[${header[$i,$((j-1))]}]=$i
        end[${header[$i,$((j-1))]}]=$k
    done
    end[${header[$i,$((j-1))]}]=-1
    lines=(${lines[2,-1]})

    # Host ID and Name
    for line in $lines; do
        s="${line[${begin[ID]},${end[ID]}]%% ##}"
        s="$s:${(r:10:: :::)${${line[${begin[NAME]},${end[NAME]}]}%% ##}}"
        machines=($machines $s)
    done

    _describe -t machines-list "machines" machines "$@" && ret=0
    return ret
}

# EO machine

__rancher_caching_policy() {
    oldp=( "$1"(Nmh+1) )     # 1 hour
    (( $#oldp ))
}

__rancher_commands() {
    local cache_policy

    zstyle -s ":completion:${curcontext}:" cache-policy cache_policy
    if [[ -z "$cache_policy" ]]; then
        zstyle ":completion:${curcontext}:" cache-policy __rancher_caching_policy
    fi

#    if ( [[ ${+_rancher_subcommands} -eq 0 ]] || _cache_invalid rancher_subcommands) \
#        && ! _retrieve_cache rancher_subcommands;
#    then
#        local -a lines
#        lines=(${(f)"$(_call_program commands rancher 2>&1)"})
#        _rancher_subcommands=(${${${lines[$((${lines[(i)Commands:]} + 1)),${lines[(I)  *]}]}## #}/ ##/:})
##        _rancher_subcommands=(${${${lines[$((${lines[(i)Commands:]} + 1)),${lines[(I)  *]}]}## #}/ ##/:})
#        _rancher_subcommands=($_rancher_subcommands)
#        (( $#_rancher_subcommands > 2 )) && _store_cache rancher_subcommands _rancher_subcommands
#    fi

    ### TODO: should be dynamically get commands as above
    if ( [[ ${+_rancher_subcommands} -eq 0 ]] || _cache_invalid rancher_subcommands) \
        && ! _retrieve_cache rancher_subcommands;
    then
        _rancher_subcommands=(
            "catalog:Operation with catalogs"
            "config:Setup client configuration"
            "docker:Run docker CLI on a host"
            "environment:Interact with environments"
            "env:Interact with environments"
            "events:Displays resource change events"
            "event:Displays resource change events"
            "exec:Run a command on a container"
            "export:Export configuration yml for a stack as a tar archive"
            "hosts:Operations on hosts"
            "host:Operations on hosts"
            "logs:Fetch the logs of a container"
            "ps:Show services/containers"
            "restart:Restart service, container"
            "rm:Delete service, container, stack, host, machine"
            "run:Run services"
            "scale:Set number of containers to run for a service"
            "ssh:SSH into host"
            "stacks:Operations on stacks"
            "stack:Operations on stacks"
            "start:Start or activate service, container, host"
            "activate:Start or activate service, container, host"
            "stop:Stop or deactivate service, container, host"
            "deactivate:Stop or deactivate service, container, host"
            "up:Bring all services up"
            "volumes:Operations on volumes"
            "volume:Operations on volumes"
            "inspect:View details for service, container, host, stack, machine"
            "wait:Wait for resources service, container, host, stack, machine"
        )
        _store_cache rancher_subcommands _rancher_subcommands
    fi
    _describe -t rancher-commands "rancher command" _rancher_subcommands
}

__rancher_subcommand() {
    local -a _command_args opts_help opts_build_create_run opts_build_create_run_update opts_create_run opts_create_run_update
    local expl help="--help"
    integer ret=1

    opts_help=("(: -)--help[Print usage]")
    opts_build_create_run=(
        "($help)--cgroup-parent=[Parent cgroup for the container]:cgroup: "
        "($help)--isolation=[Container isolation technology]:isolation:(default hyperv process)"
        "($help)--disable-content-trust[Skip image verification]"
        "($help)*--shm-size=[Size of '/dev/shm' (format is '<number><unit>')]:shm size: "
        "($help)*--ulimit=[ulimit options]:ulimit: "
        "($help)--userns=[Container user namespace]:user namespace:(host)"
    )
    opts_build_create_run_update=(
        "($help -c --cpu-shares)"{-c=,--cpu-shares=}"[CPU shares (relative weight)]:CPU shares:(0 10 100 200 500 800 1000)"
        "($help)--cpu-period=[Limit the CPU CFS (Completely Fair Scheduler) period]:CPU period: "
        "($help)--cpu-quota=[Limit the CPU CFS (Completely Fair Scheduler) quota]:CPU quota: "
        "($help)--cpuset-cpus=[CPUs in which to allow execution]:CPUs: "
        "($help)--cpuset-mems=[MEMs in which to allow execution]:MEMs: "
        "($help -m --memory)"{-m=,--memory=}"[Memory limit]:Memory limit: "
        "($help)--memory-swap=[Total memory limit with swap]:Memory limit: "
    )
    opts_create_run=(
        "($help -a --attach)"{-a=,--attach=}"[Attach to stdin, stdout or stderr]:device:(STDIN STDOUT STDERR)"
        "($help)*--add-host=[Add a custom host-to-IP mapping]:host\:ip mapping: "
        "($help)*--blkio-weight-device=[Block IO (relative device weight)]:device:Block IO weight: "
        "($help)*--cap-add=[Add Linux capabilities]:capability: "
        "($help)*--cap-drop=[Drop Linux capabilities]:capability: "
        "($help)--cidfile=[Write the container ID to the file]:CID file:_files"
        "($help)*--device=[Add a host device to the container]:device:_files"
        "($help)*--device-read-bps=[Limit the read rate (bytes per second) from a device]:device:IO rate: "
        "($help)*--device-read-iops=[Limit the read rate (IO per second) from a device]:device:IO rate: "
        "($help)*--device-write-bps=[Limit the write rate (bytes per second) to a device]:device:IO rate: "
        "($help)*--device-write-iops=[Limit the write rate (IO per second) to a device]:device:IO rate: "
        "($help)*--dns=[Custom DNS servers]:DNS server: "
        "($help)*--dns-opt=[Custom DNS options]:DNS option: "
        "($help)*--dns-search=[Custom DNS search domains]:DNS domains: "
        "($help)*"{-e=,--env=}"[Environment variables]:environment variable: "
        "($help)--entrypoint=[Overwrite the default entrypoint of the image]:entry point: "
        "($help)*--env-file=[Read environment variables from a file]:environment file:_files"
        "($help)*--expose=[Expose a port from the container without publishing it]: "
        "($help)*--group-add=[Add additional groups to run as]:group:_groups"
        "($help -h --hostname)"{-h=,--hostname=}"[Container host name]:hostname:_hosts"
        "($help -i --interactive)"{-i,--interactive}"[Keep stdin open even if not attached]"
        "($help)--ip=[Container IPv4 address]:IPv4: "
        "($help)--ip6=[Container IPv6 address]:IPv6: "
        "($help)--ipc=[IPC namespace to use]:IPC namespace: "
        "($help)*--link=[Add link to another container]:link:->link"
        "($help)*--link-local-ip=[Add a link-local address for the container]:IPv4/IPv6: "
        "($help)*"{-l=,--label=}"[Container metadata]:label: "
        "($help)--log-driver=[Default driver for container logs]:logging driver:__rancher_log_drivers"
        "($help)*--log-opt=[Log driver specific options]:log driver options:__rancher_log_options"
        "($help)--mac-address=[Container MAC address]:MAC address: "
        "($help)--name=[Container name]:name: "
        "($help)--network=[Connect a container to a network]:network mode:(bridge none container host)"
        "($help)*--network-alias=[Add network-scoped alias for the container]:alias: "
        "($help)--oom-kill-disable[Disable OOM Killer]"
        "($help)--oom-score-adj[Tune the host's OOM preferences for containers (accepts -1000 to 1000)]"
        "($help)--pids-limit[Tune container pids limit (set -1 for unlimited)]"
        "($help -P --publish-all)"{-P,--publish-all}"[Publish all exposed ports]"
        "($help)*"{-p=,--publish=}"[Expose a container's port to the host]:port:_ports"
        "($help)--pid=[PID namespace to use]:PID namespace:__rancher_complete_pid"
        "($help)--privileged[Give extended privileges to this container]"
        "($help)--read-only[Mount the container's root filesystem as read only]"
        "($help)*--security-opt=[Security options]:security option: "
        "($help)*--sysctl=-[sysctl options]:sysctl: "
        "($help -t --tty)"{-t,--tty}"[Allocate a pseudo-tty]"
        "($help -u --user)"{-u=,--user=}"[Username or UID]:user:_users"
        "($help)--tmpfs[mount tmpfs]"
        "($help)*-v[Bind mount a volume]:volume: "
        "($help)--volume-driver=[Optional volume driver for the container]:volume driver:(local)"
        "($help)*--volumes-from=[Mount volumes from the specified container]:volume: "
        "($help -w --workdir)"{-w=,--workdir=}"[Working directory inside the container]:directory:_directories"
    )
    opts_create_run_update=(
        "($help)--blkio-weight=[Block IO (relative weight), between 10 and 1000]:Block IO weight:(10 100 500 1000)"
        "($help)--kernel-memory=[Kernel memory limit in bytes]:Memory limit: "
        "($help)--memory-reservation=[Memory soft limit]:Memory limit: "
        "($help)--restart=[Restart policy]:restart policy:(no on-failure always unless-stopped)"
    )
    opts_attach_exec_run_start=(
        "($help)--detach-keys=[Escape key sequence used to detach a container]:sequence:__rancher_complete_detach_keys"
    )

    case "$words[1]" in
        (catalog)
            local curcontext="$curcontext" state
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :->command" \
                "($help -)*:: :->option-or-argument" && ret=0
            
            case $state in
                (command)
                    __rancher_catalog_commands && ret=0
                    ;;
                (option-or-argument)
                    curcontext=${curcontext%:*:*}:rancher-${words[-1]}:
                    __rancher_catalog_subcommand && ret=0
                    ;;
            esac
            ;;
        (config)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --print,-p)"{--print,-p}"[Print the current configuration]" && ret=0
            ;;
        (docker)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :__docker_commands" && ret=0
            ;;
        (environment|env)
            local curcontext="$curcontext" state
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :->command" \
                "($help -)*:: :->option-or-argument" && ret=0
            
            case $state in
                (command)
                    __rancher_environment_commands && ret=0
                    ;;
                (option-or-argument)
                    curcontext=${curcontext%:*:*}:rancher-${words[-1]}:
                    __rancher_environment_subcommand && ret=0
                    ;;
            esac
            ;;
        (events|event)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --format)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" \
                "($help --reconnect -r)"{--reconnect,-r}"[Reconnect on error]" && ret=0
            ;;
        (exec)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --help-docker)"--help-docker"[Display the 'docker exec --help']" && ret=0
            ;;
        (export)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"{--output,-o}"[Write to a file, instead of STDOUT]" && ret=0
            ;;
        (hosts|host)
            local curcontext="$curcontext" state
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :->command" \
                "($help -)*:: :->option-or-argument" && ret=0
            
            case $state in
                (command)
                    __rancher_host_commands && ret=0
                    ;;
                (option-or-argument)
                    curcontext=${curcontext%:*:*}:rancher-${words[-1]}:
                    __rancher_host_subcommand && ret=0
                    ;;
            esac
            ;;
        (logs)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --service -s)"{--service,-s}"[Show service logs]" \
                "($help --sub-log)"--sub-log"[Show service sub logs]" \
                "($help --follow -f)"{--follow,-f}"[Follow log output]" \
                "($help --tail)"--tail"[Number of lines to show from the end of the logs (default: 100)]" \
                "($help --since)"--since"[Show logs since timestamp]" \
                "($help --timestamps -t)"{--timestamps,-t}"[Show timestamps]" \
                "($help -)*:services:__rancher_services" && ret=0
            ;;
        (ps)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --all -a)"{--all,-a}"[Show stop/inactive and recently removed resources]" \
                "($help --containers -c)"{--containers,-c}"[Display containers]" \
                "($help --quiet -q)"{--quiet,-q}"[Only display IDs]" \
                "($help --format)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" && ret=0
            ;;
        (restart)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --type)"--type"[Restrict restart to specific types (service, container)]:type:(service container)" \
                "($help --Batch-size)"--batch-size"[Number of containers to restart at a time (default: 1000)]" \
                "($help --interval)"--interval"[Interval in millisecond to wait between restarts (default: 1000)]" \
                "($help -)*: :->values" && ret=0

            case $state in
                (values)
                    if [[ ${words[(r)service]} == service ]]; then
                        __rancher_services && ret=0
                    elif [[ ${words[(r)container]} == container ]]; then
                        __rancher_containers && ret=0
                    else
                        __rancher_services &&  __rancher_containers && ret=0
                    fi
                    ;;
            esac
            ;;
        (rm)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --type)"--type"[Restrict delete to specific types]:type:(service container stack host machine)" \
                "($help --stop -s)"{--stop,-s}"[Stop or deactivate resource first if needed before deleting]" \
                "($help -)*: :->values" && ret=0

            case $state in
                (values)
                    if [[ ${words[(r)service]} == service ]]; then
                        __rancher_services && ret=0
                    elif [[ ${words[(r)container]} == container ]]; then
                        __rancher_containers && ret=0
                    elif [[ ${words[(r)stack]} == stack ]]; then
                        __rancher_stacks && ret=0
                    elif [[ ${words[(r)host]} == host ]]; then
                        __rancher_hosts && ret=0
                    else
                        __rancher_services && __rancher_containers && __rancher_stacks && __rancher_hosts && ret=0
                    fi
                    ;;
            esac
            ;;
        (run)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help)"--cpu-shares"[CPU shares (relative weight) (default: 0)]" \
                "($help)"--cap-add"[Add Linux capabilities]" \
                "($help)"--cap-drop"[Drop Linux capabilities]" \
                "($help)"--device"[Add a host device to the container]" \
                "($help)"--dns"[Set custom DNS servers]" \
                "($help)"--dns-search"[Set custom DNS search domains]" \
                "($help)"--entrypoint"[Overwrite the default ENTRYPOINT of the image]" \
                "($help)"--expose"[Expose a port or a range of ports]" \
                "($help)"--hostname"[Container host name]" \
                "($help)"{--interactive,-i}"[Keep STDIN open even if not attached]" \
                "($help)"{--memory,-m}"[Memory limit (default: 0)]" \
                "($help)"--memory-swap"[Swap limit equal to memory plus swap: '-1' to enable unlimited swap (default: 0)]" \
                "($help)"--name"[Assign a name to the container]" \
                "($help)"--publish-all"[Publish all exposed ports to random ports]" \
                "($help)"{--publish,-p}"[Publish a container's port(s) to the host]" \
                "($help)"--pid"[PID namespace to use]" \
                "($help)"--privileged"[Give extended privileges to this container]" \
                "($help)"--read-only"[Mount the container's root filesystem as read only]" \
                "($help)"--security-opt"[Security Options]" \
                "($help)"{--tty,-t}"[Allocate a pseudo-TTY]" \
                "($help)"{--user,-u}"[Username or UID (format: \<name\|uid\>\[:\<group\|gid\>\])]" \
                "($help)"{--volume-driver,-v}"[Optional volume driver for the container]" \
                "($help)"{--workdir,-w}"[Working directory inside the container]" \
                "($help)"--log-driver"[Logging driver for container]" \
                "($help)"--log-opt"[Log driver options]" \
                "($help)"--net"[Connect a container to a network: host, none, bridge, managed (default: \"managed\")]:net:(host none bridge managed)" \
                "($help -): :__rancher_services" && ret=0
            ;;
        (scale)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :__rancher_services" && ret=0
            ;;
        (ssh)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :__rancher_hosts" && ret=0
            ;;
        (stacks|stack)
            local curcontext="$curcontext" state
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :->command" \
                "($help -)*:: :->option-or-argument" && ret=0
            
            case $state in
                (command)
                    __rancher_stack_commands && ret=0
                    ;;
                (option-or-argument)
                    curcontext=${curcontext%:*:*}:rancher-${words[-1]}:
                    __rancher_stack_subcommand && ret=0
                    ;;
            esac
            ;;
        (start|activate)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --type)"--type"[Restrict restart to specific types (service, container, host)]:type:(service container host)" \
                "($help -)*: :->values" && ret=0

            case $state in
                (values)
                    if [[ ${words[(r)service]} == service ]]; then
                        __rancher_services && ret=0
                    elif [[ ${words[(r)container]} == container ]]; then
                        __rancher_containers && ret=0
                    elif [[ ${words[(r)host]} == host ]]; then
                        __rancher_hosts && ret=0
                    else
                        __rancher_services && __rancher_containers && __rancher_hosts && ret=0
                    fi
                    ;;
            esac
            ;;
        (stop|deactivate)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --type)"--type"[Restrict restart to specific types (service, container, host)]:type:(service container host)" \
                "($help -)*: :->values" && ret=0

            case $state in
                (values)
                    if [[ ${words[(r)service]} == service ]]; then
                        __rancher_services && ret=0
                    elif [[ ${words[(r)container]} == container ]]; then
                        __rancher_containers && ret=0
                    elif [[ ${words[(r)host]} == host ]]; then
                        __rancher_hosts && ret=0
                    else
                        __rancher_services && __rancher_containers && __rancher_hosts && ret=0
                    fi
                    ;;
            esac
            ;;
        (up)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --pull -p)"{--pull,-p}"[Before doing the upgrade do an image pull on all hosts that have the image already]" \
                "($help -d)"-d"[Do not block and log]" \
                "($help --upgrade -u --recreate)"{--upgrade,-u,--recreate}"[Upgrade if service has changed]" \
                "($help --force-upgrade --force-recreate)"{--force-upgrade,--force-recreate}"[Upgrade regardless if service has changed]" \
                "($help --confirm-upgrade -c)"{--confirm-upgrade,-c}"[Confirm that the upgrade was success and delete old containers]" \
                "($help --rollback -r)"{--rollback,-r}"[Rollback to the previous deployed version]" \
                "($help --batch-size)"--batch-size"[Number of containers to upgrade at once (default: 2)]" \
                "($help --interval)"--interval"[Update interval in milliseconds (default: 1000)]" \
                "($help --rancher-file)"--rancher-file"[Specify an alternate Rancher compose file (default: rancher-compose.yml)]" \
                "($help --env-file -e)"{--env-file,-e}"[Specify a file from which to read environment variables]" \
                "($help --file -f)"{--file,-f}"[Specify one or more alternate compose files (default: docker-compose.yml) \[\$COMPOSE_FILE\]]" \
                "($help --stack -s)"{--stack,-s}"[Specify an alternate project name (default: directory name)]" && ret=0
            ;;
        (volumes|volume)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -): :->command" \
                "($help -)*:: :->option-or-argument" && ret=0

            case $state in
                (command)
                    __rancher_volume_commands && ret=0
                    ;;
                (option-or-argument)
                    curcontext=${curcontext%:*:*}:rancher-${words[-1]}:
                    __rancher_volume_subcommand && ret=0
                    ;;
            esac
            ;;
        (inspect)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help --type)"--type"[Restrict restart to specific types (service, container, host)]:type:(service container host)" \
                "($help --links)"--links"[Include URLs to actions and links in resource output]" \
                "($help --format)"--format"['json' or Custom format: {{.Id}} {{.Name}}]" \
                "($help -)*: :->values" && ret=0

            case $state in
                (values)
                    if [[ ${words[(r)service]} == service ]]; then
                        __rancher_services && ret=0
                    elif [[ ${words[(r)container]} == container ]]; then
                        __rancher_containers && ret=0
                    elif [[ ${words[(r)host]} == host ]]; then
                        __rancher_hosts && ret=0
                    else
                        __rancher_services && __rancher_containers &&  __rancher_hosts && ret=0
                    fi
                    ;;
            esac
            ;;
        (wait)
            _arguments $(__rancher_arguments) \
                $opts_help \
                "($help -)*: :->values" && ret=0

            case $state in
                (values)
                    if [[ ${words[(r)service]} == service ]]; then
                        __rancher_services && ret=0
                    elif [[ ${words[(r)container]} == container ]]; then
                        __rancher_containers && ret=0
                    elif [[ ${words[(r)host]} == host ]]; then
                        __rancher_hosts && ret=0
                    elif [[ ${words[(r)stack]} == stack ]]; then
                        __rancher_stacks && ret=0
                    else
                        __rancher_services && __rancher_containers &&  __rancher_hosts && __rancher_stacks && ret=0
                    fi
                    ;;
            esac
            ;;
        (help)
            _arguments $(__rancher_arguments) ":subcommand:__rancher_commands" && ret=0
            ;;
    esac

    return ret
}

_rancher() {
    # Support for subservices, which allows for `compdef _rancher rancher-shell=_rancher_containers`.
    # Based on /usr/share/zsh/functions/Completion/Unix/_git without support for `ret`.
    if [[ $service != rancher ]]; then
        _call_function - _$service
        return
    fi

    local curcontext="$curcontext" state line help="-h --help"
    integer ret=1
    typeset -A opt_args

    _arguments $(__rancher_arguments) -C \
        "(: -)"{--help,-h}"[Print usage]" \
        "($help --debug)"--debug"[Debug logging]" \
        "($help --config -c)"{--config,-c}"[Client configuration file (default \${HOME}/.rancher/cli.json) \[\$RANCHER_CLIENT_CONFIG\]]" \
        "($help --environment --env)"{--environment,--env}"[Environment name or ID \[\$RANCHER_ENVIRONMENT\]]:environment:__rancher_environments" \
        "($help --url)"--url"[Specify the Rancher API endpoint URL \[\$RANCHER_URL\]]:url:(http\:// https\://)" \
        "($help --access-key)"--access-key"[Specify ancher API access key \[\$RANCHER_ACCESS_KEY\]]" \
        "($help --secret-key)"--secret-key"[Specify ancher API secret key \[\$RANCHER_SECRET_KEY\]]" \
        "($help --host)"--host"[Host used for rancher command \[\$RANCHER_rancher_HOST\]]:host:__rancher_hosts" \
        "($help --wait -w)"{--wait,-w}"[Wait for resource to reach resting state]" \
        "($help --wait-timeout)"--wait-timeout\ "[Timeout in seconds to wait (default: 6000)]" \
        "($help --wait-state)"--wait-state"[State to wait for (active, healthy, etc)]" \
        "($help --version -v)"{--version,-v}"[print the version]" \
        "($help -): :->command" \
        "($help -)*:: :->option-or-argument" && ret=0

    local host=${opt_args[-H]}${opt_args[--host]}
    local config=${opt_args[--config]}
    local rancher_options="${host:+--host $host} ${config:+--config $config}"

    case $state in
        (command)
            __rancher_commands && ret=0
            ;;
        (option-or-argument)
            curcontext=${curcontext%:*:*}:rancher-$words[1]:
            __rancher_subcommand && ret=0
            ;;
    esac

    return ret
}

_rancher "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
# vim: foldmethod=syntax ft=zsh sw=4 ts=4 et
